---
import type { HTMLAttributes } from 'astro/types';

export interface Props extends HTMLAttributes<'div'> {
  diagram: string;
  title?: string;
  theme?: 'default' | 'dark' | 'neutral' | 'forest' | 'base';
  responsive?: boolean;
  exportable?: boolean;
  height?: string;
  width?: string;
}

const {
  diagram,
  title,
  theme = 'default',
  responsive = true,
  exportable = true,
  height = 'auto',
  width = '100%',
  class: className = '',
  ...rest
} = Astro.props;

// Generate unique ID for this diagram
const diagramId = `mermaid-${Math.random().toString(36).substr(2, 9)}`;

// Clean and validate diagram syntax
const cleanDiagram = diagram.trim();

// Detect diagram type from syntax
const diagramType = (() => {
  if (cleanDiagram.startsWith('graph')) return 'flowchart';
  if (cleanDiagram.startsWith('sequenceDiagram')) return 'sequence';
  if (cleanDiagram.startsWith('classDiagram')) return 'class';
  if (cleanDiagram.startsWith('stateDiagram')) return 'state';
  if (cleanDiagram.startsWith('erDiagram')) return 'er';
  if (cleanDiagram.startsWith('journey')) return 'journey';
  if (cleanDiagram.startsWith('gantt')) return 'gantt';
  if (cleanDiagram.startsWith('pie')) return 'pie';
  if (cleanDiagram.startsWith('gitGraph')) return 'git';
  if (cleanDiagram.startsWith('mindmap')) return 'mindmap';
  if (cleanDiagram.startsWith('timeline')) return 'timeline';
  return 'flowchart';
})();

// Theme configuration mapping
const themeConfig = {
  default: {
    primaryColor: '#0ea5e9',
    primaryTextColor: '#1f2937',
    primaryBorderColor: '#e5e7eb',
    lineColor: '#6b7280',
    secondaryColor: '#f3f4f6',
    tertiaryColor: '#ffffff',
    background: '#ffffff',
    mainBkg: '#ffffff',
    secondBkg: '#f8fafc',
    tertiaryBkg: '#f1f5f9'
  },
  dark: {
    primaryColor: '#3b82f6',
    primaryTextColor: '#f9fafb',
    primaryBorderColor: '#374151',
    lineColor: '#9ca3af',
    secondaryColor: '#1f2937',
    tertiaryColor: '#111827',
    background: '#111827',
    mainBkg: '#1f2937',
    secondBkg: '#374151',
    tertiaryBkg: '#4b5563'
  },
  neutral: {
    primaryColor: '#525252',
    primaryTextColor: '#171717',
    primaryBorderColor: '#d4d4d4',
    lineColor: '#737373',
    secondaryColor: '#f5f5f5',
    tertiaryColor: '#ffffff',
    background: '#ffffff',
    mainBkg: '#ffffff',
    secondBkg: '#fafafa',
    tertiaryBkg: '#f5f5f5'
  },
  forest: {
    primaryColor: '#059669',
    primaryTextColor: '#064e3b',
    primaryBorderColor: '#d1fae5',
    lineColor: '#6b7280',
    secondaryColor: '#f0fdf4',
    tertiaryColor: '#ffffff',
    background: '#ffffff',
    mainBkg: '#ffffff',
    secondBkg: '#f0fdf4',
    tertiaryBkg: '#dcfce7'
  },
  base: {
    primaryColor: '#0ea5e9',
    primaryTextColor: '#0f172a',
    primaryBorderColor: '#cbd5e1',
    lineColor: '#64748b',
    secondaryColor: '#f8fafc',
    tertiaryColor: '#ffffff',
    background: '#ffffff',
    mainBkg: '#ffffff',
    secondBkg: '#f8fafc',
    tertiaryBkg: '#f1f5f9'
  }
};
---

<div
  class={`mermaid-container ${responsive ? 'responsive' : ''} ${className}`}
  data-diagram-type={diagramType}
  {...rest}
>
  {title && (
    <div class="diagram-header">
      <h3 class="diagram-title">{title}</h3>
      {exportable && (
        <div class="diagram-controls">
          <button
            class="export-btn"
            data-diagram-id={diagramId}
            title="Export diagram"
            aria-label="Export diagram as image"
          >
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
          </button>
          <button
            class="fullscreen-btn"
            data-diagram-id={diagramId}
            title="View fullscreen"
            aria-label="View diagram in fullscreen"
          >
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h4a1 1 0 010 2H6.414l2.293 2.293a1 1 0 01-1.414 1.414L5 6.414V8a1 1 0 01-2 0V4zm9 1a1 1 0 010-2h4a1 1 0 011 1v4a1 1 0 01-2 0V6.414l-2.293 2.293a1 1 0 01-1.414-1.414L13.586 5H12zm-9 7a1 1 0 012 0v1.586l2.293-2.293a1 1 0 111.414 1.414L6.414 15H8a1 1 0 010 2H4a1 1 0 01-1-1v-4zm13-1a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 010-2h1.586l-2.293-2.293a1 1 0 111.414-1.414L15 13.586V12a1 1 0 011-1z" clip-rule="evenodd" />
            </svg>
          </button>
        </div>
      )}
    </div>
  )}

  <div
    id={diagramId}
    class="mermaid-diagram"
    data-theme={theme}
    style={`height: ${height}; width: ${width};`}
  >
    {cleanDiagram}
  </div>

  <div class="diagram-loading" id={`${diagramId}-loading`}>
    <div class="loading-spinner"></div>
    <span>Loading diagram...</span>
  </div>

  <div class="diagram-error" id={`${diagramId}-error`} style="display: none;">
    <div class="error-icon">⚠️</div>
    <div class="error-message">
      Failed to render diagram. Please check the syntax.
    </div>
  </div>
</div>

<style>
  .mermaid-container {
    @apply relative bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4 mb-6;
  }

  .mermaid-container.responsive {
    @apply w-full;
  }

  .diagram-header {
    @apply flex justify-between items-center mb-4 pb-2 border-b border-gray-200 dark:border-gray-700;
  }

  .diagram-title {
    @apply text-lg font-semibold text-gray-900 dark:text-gray-100 m-0;
  }

  .diagram-controls {
    @apply flex space-x-2;
  }

  .export-btn,
  .fullscreen-btn {
    @apply p-2 rounded-md bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-600 hover:text-gray-900 dark:hover:text-gray-100 transition-colors cursor-pointer;
  }

  .mermaid-diagram {
    @apply w-full overflow-auto text-center;
    min-height: 200px;
  }

  .diagram-loading {
    @apply absolute inset-0 flex items-center justify-center bg-white dark:bg-gray-800 bg-opacity-90 dark:bg-opacity-90;
    z-index: 10;
  }

  .loading-spinner {
    @apply w-6 h-6 border-2 border-primary-200 border-t-primary-600 rounded-full animate-spin mr-3;
  }

  .diagram-error {
    @apply absolute inset-0 flex flex-col items-center justify-center bg-red-50 dark:bg-red-900 bg-opacity-90 dark:bg-opacity-90 text-red-700 dark:text-red-200;
    z-index: 10;
  }

  .error-icon {
    @apply text-2xl mb-2;
  }

  .error-message {
    @apply text-sm font-medium;
  }

  /* Mermaid diagram styling overrides */
  .mermaid-diagram :global(.node rect),
  .mermaid-diagram :global(.node circle),
  .mermaid-diagram :global(.node ellipse),
  .mermaid-diagram :global(.node polygon) {
    @apply stroke-2;
  }

  .mermaid-diagram :global(.edgeLabel) {
    @apply bg-white dark:bg-gray-800 px-1 py-0.5 rounded text-xs;
  }

  .mermaid-diagram :global(.cluster rect) {
    @apply fill-blue-50 dark:fill-blue-900 stroke-blue-200 dark:stroke-blue-700;
  }

  /* Print styles */
  @media print {
    .diagram-controls {
      @apply hidden;
    }

    .mermaid-container {
      @apply border-gray-400;
      break-inside: avoid;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .mermaid-diagram :global(.node rect),
    .mermaid-diagram :global(.node circle) {
      @apply stroke-black;
      stroke-width: 3px;
    }
  }
</style>

<script>
  import mermaid from 'mermaid';

  // Initialize Mermaid
  function initializeMermaid() {
    mermaid.initialize({
      startOnLoad: false,
      theme: 'base',
      themeVariables: {
        primaryColor: '#0ea5e9',
        primaryTextColor: '#1f2937',
        primaryBorderColor: '#e5e7eb',
        lineColor: '#6b7280',
        secondaryColor: '#f3f4f6',
        tertiaryColor: '#ffffff',
        background: '#ffffff'
      },
      flowchart: {
        nodeSpacing: 20,
        rankSpacing: 40,
        curve: 'basis'
      },
      sequence: {
        diagramMarginX: 50,
        diagramMarginY: 10,
        boxTextMargin: 5,
        noteMargin: 10,
        messageMargin: 35
      },
      gantt: {
        taskBkgColor: '#0ea5e9',
        taskTextColor: '#ffffff',
        activeTaskBkgColor: '#3b82f6',
        activeTaskTextColor: '#ffffff',
        gridColor: '#e5e7eb',
        section0: '#f8fafc',
        section1: '#f1f5f9',
        section2: '#e2e8f0',
        section3: '#cbd5e1'
      },
      journey: {
        diagramMarginX: 50,
        diagramMarginY: 50,
        leftMargin: 150,
        width: 150,
        height: 50,
        boxMargin: 10,
        boxTextMargin: 5,
        noteMargin: 10,
        messageMargin: 35
      },
      pie: {
        textPosition: 0.75
      },
      er: {
        diagramPadding: 20,
        layoutDirection: 'TB',
        minEntityWidth: 100,
        minEntityHeight: 75,
        entityPadding: 15,
        stroke: '#6b7280',
        fill: '#f9fafb'
      }
    });
  }

  // Render a single diagram
  async function renderDiagram(container: HTMLElement) {
    const diagramElement = container.querySelector('.mermaid-diagram') as HTMLElement;
    const loadingElement = container.querySelector('.diagram-loading') as HTMLElement;
    const errorElement = container.querySelector('.diagram-error') as HTMLElement;

    if (!diagramElement) return;

    const diagramId = diagramElement.id;
    const theme = diagramElement.dataset.theme || 'default';
    const diagramText = diagramElement.textContent?.trim() || '';

    try {
      // Show loading
      loadingElement.style.display = 'flex';
      errorElement.style.display = 'none';

      // Update theme if needed
      const currentTheme = mermaid.getConfig()?.theme;
      if (currentTheme !== theme) {
        const themeConfig = getThemeConfig(theme);
        mermaid.initialize({ theme: 'base', themeVariables: themeConfig });
      }

      // Validate diagram syntax
      const isValid = await mermaid.parse(diagramText);
      if (!isValid) {
        throw new Error('Invalid diagram syntax');
      }

      // Render diagram
      const { svg } = await mermaid.render(diagramId + '_svg', diagramText);

      // Insert rendered SVG
      diagramElement.innerHTML = svg;

      // Apply responsive behavior
      const svgElement = diagramElement.querySelector('svg');
      if (svgElement && container.classList.contains('responsive')) {
        svgElement.setAttribute('width', '100%');
        svgElement.setAttribute('height', 'auto');
        svgElement.style.maxWidth = '100%';
      }

      // Hide loading
      loadingElement.style.display = 'none';

      // Add interaction handlers
      setupDiagramInteractions(container, diagramElement);

    } catch (error) {
      console.error('Mermaid rendering error:', error);

      // Show error
      loadingElement.style.display = 'none';
      errorElement.style.display = 'flex';
      errorElement.querySelector('.error-message')!.textContent =
        `Failed to render diagram: ${error.message}`;
    }
  }

  // Get theme configuration
  function getThemeConfig(theme: string) {
    const themes = {
      default: {
        primaryColor: '#0ea5e9',
        primaryTextColor: '#1f2937',
        primaryBorderColor: '#e5e7eb',
        lineColor: '#6b7280',
        secondaryColor: '#f3f4f6',
        tertiaryColor: '#ffffff',
        background: '#ffffff'
      },
      dark: {
        primaryColor: '#3b82f6',
        primaryTextColor: '#f9fafb',
        primaryBorderColor: '#374151',
        lineColor: '#9ca3af',
        secondaryColor: '#1f2937',
        tertiaryColor: '#111827',
        background: '#111827'
      },
      neutral: {
        primaryColor: '#525252',
        primaryTextColor: '#171717',
        primaryBorderColor: '#d4d4d4',
        lineColor: '#737373',
        secondaryColor: '#f5f5f5',
        tertiaryColor: '#ffffff',
        background: '#ffffff'
      },
      forest: {
        primaryColor: '#059669',
        primaryTextColor: '#064e3b',
        primaryBorderColor: '#d1fae5',
        lineColor: '#6b7280',
        secondaryColor: '#f0fdf4',
        tertiaryColor: '#ffffff',
        background: '#ffffff'
      },
      base: {
        primaryColor: '#0ea5e9',
        primaryTextColor: '#0f172a',
        primaryBorderColor: '#cbd5e1',
        lineColor: '#64748b',
        secondaryColor: '#f8fafc',
        tertiaryColor: '#ffffff',
        background: '#ffffff'
      }
    };

    return themes[theme] || themes.default;
  }

  // Setup diagram interactions
  function setupDiagramInteractions(container: HTMLElement, diagramElement: HTMLElement) {
    const exportBtn = container.querySelector('.export-btn') as HTMLButtonElement;
    const fullscreenBtn = container.querySelector('.fullscreen-btn') as HTMLButtonElement;

    if (exportBtn) {
      exportBtn.addEventListener('click', () => exportDiagram(diagramElement));
    }

    if (fullscreenBtn) {
      fullscreenBtn.addEventListener('click', () => showFullscreen(container));
    }
  }

  // Export diagram as image
  async function exportDiagram(diagramElement: HTMLElement) {
    const svgElement = diagramElement.querySelector('svg');
    if (!svgElement) return;

    try {
      // Create canvas
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      if (!ctx) return;

      // Get SVG dimensions
      const svgRect = svgElement.getBoundingClientRect();
      canvas.width = svgRect.width * 2; // Higher resolution
      canvas.height = svgRect.height * 2;

      // Create image from SVG
      const svgData = new XMLSerializer().serializeToString(svgElement);
      const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });
      const svgUrl = URL.createObjectURL(svgBlob);

      const img = new Image();
      img.onload = () => {
        ctx.scale(2, 2); // Higher resolution
        ctx.drawImage(img, 0, 0);

        // Download image
        canvas.toBlob((blob) => {
          if (blob) {
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `diagram-${Date.now()}.png`;
            a.click();
            URL.revokeObjectURL(url);
          }
        });

        URL.revokeObjectURL(svgUrl);
      };

      img.src = svgUrl;
    } catch (error) {
      console.error('Export failed:', error);
      alert('Failed to export diagram. Please try again.');
    }
  }

  // Show diagram in fullscreen
  function showFullscreen(container: HTMLElement) {
    const diagramElement = container.querySelector('.mermaid-diagram') as HTMLElement;
    if (!diagramElement) return;

    // Create fullscreen overlay
    const overlay = document.createElement('div');
    overlay.className = 'diagram-fullscreen-overlay';
    overlay.innerHTML = `
      <div class="fullscreen-content">
        <div class="fullscreen-header">
          <button class="close-fullscreen">
            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
          </button>
        </div>
        <div class="fullscreen-diagram"></div>
      </div>
    `;

    // Copy diagram content
    const fullscreenDiagram = overlay.querySelector('.fullscreen-diagram') as HTMLElement;
    fullscreenDiagram.innerHTML = diagramElement.innerHTML;

    // Add to body
    document.body.appendChild(overlay);

    // Close handler
    const closeBtn = overlay.querySelector('.close-fullscreen') as HTMLButtonElement;
    const closeFullscreen = () => {
      document.body.removeChild(overlay);
    };

    closeBtn.addEventListener('click', closeFullscreen);
    overlay.addEventListener('click', (e) => {
      if (e.target === overlay) closeFullscreen();
    });

    // Keyboard handler
    const keyHandler = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        closeFullscreen();
        document.removeEventListener('keydown', keyHandler);
      }
    };
    document.addEventListener('keydown', keyHandler);
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      initializeMermaid();

      // Render all diagrams
      const containers = document.querySelectorAll('.mermaid-container');
      containers.forEach(container => renderDiagram(container as HTMLElement));
    });
  } else {
    initializeMermaid();

    // Render all diagrams
    const containers = document.querySelectorAll('.mermaid-container');
    containers.forEach(container => renderDiagram(container as HTMLElement));
  }

  // Handle theme changes
  document.addEventListener('theme-changed', () => {
    const containers = document.querySelectorAll('.mermaid-container');
    containers.forEach(container => renderDiagram(container as HTMLElement));
  });
</script>

<!-- Fullscreen overlay styles -->
<style is:global>
  .diagram-fullscreen-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.9);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
  }

  .fullscreen-content {
    width: 90vw;
    height: 90vh;
    background: white;
    border-radius: 8px;
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }

  .dark .fullscreen-content {
    background: #1f2937;
  }

  .fullscreen-header {
    display: flex;
    justify-content: flex-end;
    padding: 1rem;
    border-bottom: 1px solid #e5e7eb;
  }

  .dark .fullscreen-header {
    border-bottom-color: #374151;
  }

  .close-fullscreen {
    padding: 0.5rem;
    border: none;
    background: #f3f4f6;
    border-radius: 0.375rem;
    cursor: pointer;
    color: #6b7280;
    transition: all 0.2s;
  }

  .close-fullscreen:hover {
    background: #e5e7eb;
    color: #374151;
  }

  .dark .close-fullscreen {
    background: #374151;
    color: #9ca3af;
  }

  .dark .close-fullscreen:hover {
    background: #4b5563;
    color: #f3f4f6;
  }

  .fullscreen-diagram {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    overflow: auto;
  }

  .fullscreen-diagram svg {
    max-width: 100%;
    max-height: 100%;
    width: auto !important;
    height: auto !important;
  }
</style>