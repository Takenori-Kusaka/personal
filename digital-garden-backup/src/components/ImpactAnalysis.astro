---
import type { ImpactScore, ImpactAnalysisResult } from '../utils/impact-analyzer';

export interface Props {
  analysis: ImpactAnalysisResult;
  showDetails?: boolean;
  showRecommendations?: boolean;
  compact?: boolean;
}

const {
  analysis,
  showDetails = true,
  showRecommendations = true,
  compact = false
} = Astro.props;

const { scores, recommendations, riskFactors, actionPriority, confidenceLevel } = analysis;

// Helper function to render score bars
const renderScoreBar = (score?: number, inverse = false) => {
  if (typeof score !== 'number') return { filled: 0, empty: 5, percentage: 0 };

  const normalizedScore = inverse ? 6 - score : score;
  const filled = Math.min(Math.max(normalizedScore, 0), 5);
  const empty = 5 - filled;
  const percentage = (filled / 5) * 100;

  return { filled, empty, percentage };
};

// Priority colors
const priorityColors = {
  urgent: 'bg-red-500 text-white',
  high: 'bg-orange-500 text-white',
  medium: 'bg-yellow-500 text-gray-900',
  low: 'bg-gray-500 text-white'
};

const priorityIcons = {
  urgent: 'üö®',
  high: 'üî•',
  medium: '‚ö°',
  low: 'üìã'
};

// Confidence colors
const confidenceColors = {
  high: 'text-green-600',
  medium: 'text-yellow-600',
  low: 'text-orange-600',
  very_low: 'text-red-600'
};
---

<div class={`impact-analysis ${compact ? 'compact' : ''}`}>
  <!-- Overall Summary -->
  <div class="analysis-header">
    <div class="overall-score">
      <div class="score-circle">
        <svg class="score-circle-svg" viewBox="0 0 36 36">
          <path
            class="score-circle-bg"
            d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-dasharray="100, 100"
            opacity="0.3"
          />
          <path
            class="score-circle-progress"
            d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-dasharray={`${(scores.overallScore || 0) * 20}, 100`}
            stroke-linecap="round"
          />
        </svg>
        <div class="score-text">
          <span class="score-value">{scores.overallScore?.toFixed(1) || 'N/A'}</span>
          <span class="score-max">/5.0</span>
        </div>
      </div>
    </div>

    <div class="priority-confidence">
      <div class={`priority-badge ${priorityColors[actionPriority]}`}>
        <span class="priority-icon">{priorityIcons[actionPriority]}</span>
        <span class="priority-text">{actionPriority.toUpperCase()}</span>
      </div>

      <div class="confidence-indicator">
        <span class="confidence-label">‰ø°È†ºÂ∫¶:</span>
        <span class={`confidence-value ${confidenceColors[confidenceLevel]}`}>
          {confidenceLevel.replace('_', ' ').toUpperCase()}
        </span>
        <span class="confidence-percentage">
          ({Math.round((scores.confidence || 0.5) * 100)}%)
        </span>
      </div>
    </div>
  </div>

  {showDetails && (
    <!-- Detailed Scores -->
    <div class="dimensions-grid">
      {scores.businessValue && (
        <div class="dimension-card business-value">
          <h3 class="dimension-title">
            <span class="dimension-icon">üí∞</span>
            Business Value
          </h3>
          <div class="criteria-list">
            <div class="criterion">
              <span class="criterion-name">Market Opportunity</span>
              <div class="score-bar">
                {Array.from({ length: renderScoreBar(scores.businessValue.marketOpportunity).filled }).map(() => (
                  <div class="score-dot filled" />
                ))}
                {Array.from({ length: renderScoreBar(scores.businessValue.marketOpportunity).empty }).map(() => (
                  <div class="score-dot empty" />
                ))}
                <span class="score-number">{scores.businessValue.marketOpportunity}</span>
              </div>
            </div>

            <div class="criterion">
              <span class="criterion-name">Competitive Advantage</span>
              <div class="score-bar">
                {Array.from({ length: renderScoreBar(scores.businessValue.competitiveAdvantage).filled }).map(() => (
                  <div class="score-dot filled" />
                ))}
                {Array.from({ length: renderScoreBar(scores.businessValue.competitiveAdvantage).empty }).map(() => (
                  <div class="score-dot empty" />
                ))}
                <span class="score-number">{scores.businessValue.competitiveAdvantage}</span>
              </div>
            </div>

            <div class="criterion">
              <span class="criterion-name">Revenue Potential</span>
              <div class="score-bar">
                {Array.from({ length: renderScoreBar(scores.businessValue.revenuePotential).filled }).map(() => (
                  <div class="score-dot filled" />
                ))}
                {Array.from({ length: renderScoreBar(scores.businessValue.revenuePotential).empty }).map(() => (
                  <div class="score-dot empty" />
                ))}
                <span class="score-number">{scores.businessValue.revenuePotential}</span>
              </div>
            </div>
          </div>
        </div>
      )}

      {scores.implementationFeasibility && (
        <div class="dimension-card implementation-feasibility">
          <h3 class="dimension-title">
            <span class="dimension-icon">üîß</span>
            Implementation Feasibility
          </h3>
          <div class="criteria-list">
            <div class="criterion">
              <span class="criterion-name">Technical Complexity</span>
              <div class="score-bar">
                {Array.from({ length: renderScoreBar(scores.implementationFeasibility.technicalComplexity, true).filled }).map(() => (
                  <div class="score-dot filled inverse" />
                ))}
                {Array.from({ length: renderScoreBar(scores.implementationFeasibility.technicalComplexity, true).empty }).map(() => (
                  <div class="score-dot empty" />
                ))}
                <span class="score-number">{scores.implementationFeasibility.technicalComplexity}</span>
              </div>
            </div>

            <div class="criterion">
              <span class="criterion-name">Resource Requirements</span>
              <div class="score-bar">
                {Array.from({ length: renderScoreBar(scores.implementationFeasibility.resourceRequirements, true).filled }).map(() => (
                  <div class="score-dot filled inverse" />
                ))}
                {Array.from({ length: renderScoreBar(scores.implementationFeasibility.resourceRequirements, true).empty }).map(() => (
                  <div class="score-dot empty" />
                ))}
                <span class="score-number">{scores.implementationFeasibility.resourceRequirements}</span>
              </div>
            </div>

            <div class="criterion">
              <span class="criterion-name">Timeline Estimate</span>
              <div class="score-bar">
                {Array.from({ length: renderScoreBar(scores.implementationFeasibility.timelineEstimate, true).filled }).map(() => (
                  <div class="score-dot filled inverse" />
                ))}
                {Array.from({ length: renderScoreBar(scores.implementationFeasibility.timelineEstimate, true).empty }).map(() => (
                  <div class="score-dot empty" />
                ))}
                <span class="score-number">{scores.implementationFeasibility.timelineEstimate}</span>
              </div>
            </div>
          </div>
        </div>
      )}

      {scores.socialImpact && (
        <div class="dimension-card social-impact">
          <h3 class="dimension-title">
            <span class="dimension-icon">üåç</span>
            Social Impact
          </h3>
          <div class="criteria-list">
            <div class="criterion">
              <span class="criterion-name">User Benefit</span>
              <div class="score-bar">
                {Array.from({ length: renderScoreBar(scores.socialImpact.userBenefit).filled }).map(() => (
                  <div class="score-dot filled" />
                ))}
                {Array.from({ length: renderScoreBar(scores.socialImpact.userBenefit).empty }).map(() => (
                  <div class="score-dot empty" />
                ))}
                <span class="score-number">{scores.socialImpact.userBenefit}</span>
              </div>
            </div>

            <div class="criterion">
              <span class="criterion-name">Societal Contribution</span>
              <div class="score-bar">
                {Array.from({ length: renderScoreBar(scores.socialImpact.societalContribution).filled }).map(() => (
                  <div class="score-dot filled" />
                ))}
                {Array.from({ length: renderScoreBar(scores.socialImpact.societalContribution).empty }).map(() => (
                  <div class="score-dot empty" />
                ))}
                <span class="score-number">{scores.socialImpact.societalContribution}</span>
              </div>
            </div>

            <div class="criterion">
              <span class="criterion-name">Sustainability</span>
              <div class="score-bar">
                {Array.from({ length: renderScoreBar(scores.socialImpact.sustainability).filled }).map(() => (
                  <div class="score-dot filled" />
                ))}
                {Array.from({ length: renderScoreBar(scores.socialImpact.sustainability).empty }).map(() => (
                  <div class="score-dot empty" />
                ))}
                <span class="score-number">{scores.socialImpact.sustainability}</span>
              </div>
            </div>
          </div>
        </div>
      )}

      {scores.strategicAlignment && (
        <div class="dimension-card strategic-alignment">
          <h3 class="dimension-title">
            <span class="dimension-icon">üéØ</span>
            Strategic Alignment
          </h3>
          <div class="criteria-list">
            <div class="criterion">
              <span class="criterion-name">Vision Fit</span>
              <div class="score-bar">
                {Array.from({ length: renderScoreBar(scores.strategicAlignment.visionFit).filled }).map(() => (
                  <div class="score-dot filled" />
                ))}
                {Array.from({ length: renderScoreBar(scores.strategicAlignment.visionFit).empty }).map(() => (
                  <div class="score-dot empty" />
                ))}
                <span class="score-number">{scores.strategicAlignment.visionFit}</span>
              </div>
            </div>

            <div class="criterion">
              <span class="criterion-name">Skill Development</span>
              <div class="score-bar">
                {Array.from({ length: renderScoreBar(scores.strategicAlignment.skillDevelopment).filled }).map(() => (
                  <div class="score-dot filled" />
                ))}
                {Array.from({ length: renderScoreBar(scores.strategicAlignment.skillDevelopment).empty }).map(() => (
                  <div class="score-dot empty" />
                ))}
                <span class="score-number">{scores.strategicAlignment.skillDevelopment}</span>
              </div>
            </div>

            <div class="criterion">
              <span class="criterion-name">Network Expansion</span>
              <div class="score-bar">
                {Array.from({ length: renderScoreBar(scores.strategicAlignment.networkExpansion).filled }).map(() => (
                  <div class="score-dot filled" />
                ))}
                {Array.from({ length: renderScoreBar(scores.strategicAlignment.networkExpansion).empty }).map(() => (
                  <div class="score-dot empty" />
                ))}
                <span class="score-number">{scores.strategicAlignment.networkExpansion}</span>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )}

  {showRecommendations && (
    <!-- Recommendations and Risks -->
    <div class="recommendations-risks">
      {recommendations.length > 0 && (
        <div class="recommendations">
          <h3 class="section-title">
            <span class="section-icon">üí°</span>
            Recommendations
          </h3>
          <ul class="recommendation-list">
            {recommendations.map(recommendation => (
              <li class="recommendation-item">{recommendation}</li>
            ))}
          </ul>
        </div>
      )}

      {riskFactors.length > 0 && (
        <div class="risks">
          <h3 class="section-title">
            <span class="section-icon">‚ö†Ô∏è</span>
            Risk Factors
          </h3>
          <ul class="risk-list">
            {riskFactors.map(risk => (
              <li class="risk-item">{risk}</li>
            ))}
          </ul>
        </div>
      )}
    </div>
  )}

  <!-- Analysis Metadata -->
  <div class="analysis-metadata">
    <div class="metadata-item">
      <span class="metadata-label">Analyzed:</span>
      <span class="metadata-value">
        {new Date(analysis.metadata.analyzedAt).toLocaleDateString('ja-JP')}
      </span>
    </div>
    <div class="metadata-item">
      <span class="metadata-label">Data Points:</span>
      <span class="metadata-value">{analysis.metadata.dataPoints}</span>
    </div>
    <div class="metadata-item">
      <span class="metadata-label">Algorithm:</span>
      <span class="metadata-value">{analysis.metadata.version}</span>
    </div>
  </div>
</div>

<style>
  .impact-analysis {
    @apply bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-6 space-y-6;
  }

  .impact-analysis.compact {
    @apply p-4 space-y-4;
  }

  /* Overall Summary */
  .analysis-header {
    @apply flex items-center justify-between flex-wrap gap-4;
  }

  .overall-score {
    @apply flex-shrink-0;
  }

  .score-circle {
    @apply relative w-24 h-24;
  }

  .score-circle-svg {
    @apply w-full h-full transform -rotate-90;
    color: #0ea5e9;
  }

  .score-text {
    @apply absolute inset-0 flex flex-col items-center justify-center text-center;
  }

  .score-value {
    @apply text-2xl font-bold text-gray-900 dark:text-gray-100;
  }

  .score-max {
    @apply text-sm text-gray-600 dark:text-gray-400;
  }

  .priority-confidence {
    @apply flex flex-col space-y-2;
  }

  .priority-badge {
    @apply inline-flex items-center px-3 py-1 rounded-full text-sm font-medium;
  }

  .priority-icon {
    @apply mr-1;
  }

  .confidence-indicator {
    @apply text-sm;
  }

  .confidence-label {
    @apply text-gray-600 dark:text-gray-400;
  }

  .confidence-value {
    @apply font-medium;
  }

  .confidence-percentage {
    @apply text-gray-500 dark:text-gray-500 text-xs;
  }

  /* Dimensions Grid */
  .dimensions-grid {
    @apply grid grid-cols-1 md:grid-cols-2 gap-4;
  }

  .dimension-card {
    @apply bg-gray-50 dark:bg-gray-700 rounded-lg p-4;
  }

  .dimension-card.business-value {
    @apply border-l-4 border-green-500;
  }

  .dimension-card.implementation-feasibility {
    @apply border-l-4 border-blue-500;
  }

  .dimension-card.social-impact {
    @apply border-l-4 border-purple-500;
  }

  .dimension-card.strategic-alignment {
    @apply border-l-4 border-orange-500;
  }

  .dimension-title {
    @apply flex items-center text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3;
  }

  .dimension-icon {
    @apply mr-2;
  }

  .criteria-list {
    @apply space-y-3;
  }

  .criterion {
    @apply flex items-center justify-between;
  }

  .criterion-name {
    @apply text-sm text-gray-700 dark:text-gray-300 flex-1 mr-3;
  }

  .score-bar {
    @apply flex items-center space-x-1;
  }

  .score-dot {
    @apply w-3 h-3 rounded-full;
  }

  .score-dot.filled {
    @apply bg-green-500;
  }

  .score-dot.filled.inverse {
    @apply bg-red-500;
  }

  .score-dot.empty {
    @apply bg-gray-300 dark:bg-gray-600;
  }

  .score-number {
    @apply text-sm font-medium text-gray-600 dark:text-gray-400 ml-2 min-w-4 text-center;
  }

  /* Recommendations and Risks */
  .recommendations-risks {
    @apply grid grid-cols-1 lg:grid-cols-2 gap-6;
  }

  .section-title {
    @apply flex items-center text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3;
  }

  .section-icon {
    @apply mr-2;
  }

  .recommendation-list,
  .risk-list {
    @apply space-y-2;
  }

  .recommendation-item {
    @apply text-sm text-gray-700 dark:text-gray-300 bg-blue-50 dark:bg-blue-900/20 rounded-md p-3 border-l-3 border-blue-400;
  }

  .risk-item {
    @apply text-sm text-gray-700 dark:text-gray-300 bg-yellow-50 dark:bg-yellow-900/20 rounded-md p-3 border-l-3 border-yellow-400;
  }

  /* Metadata */
  .analysis-metadata {
    @apply flex flex-wrap gap-4 text-xs text-gray-500 dark:text-gray-500 pt-4 border-t border-gray-200 dark:border-gray-600;
  }

  .metadata-item {
    @apply flex items-center space-x-1;
  }

  .metadata-label {
    @apply font-medium;
  }

  .metadata-value {
    @apply text-gray-600 dark:text-gray-400;
  }

  /* Compact Mode Adjustments */
  .impact-analysis.compact .analysis-header {
    @apply flex-col items-start space-y-2;
  }

  .impact-analysis.compact .score-circle {
    @apply w-16 h-16;
  }

  .impact-analysis.compact .score-value {
    @apply text-lg;
  }

  .impact-analysis.compact .dimensions-grid {
    @apply grid-cols-1;
  }

  .impact-analysis.compact .recommendations-risks {
    @apply grid-cols-1;
  }

  /* Print Styles */
  @media print {
    .impact-analysis {
      @apply border-gray-400;
      break-inside: avoid;
    }

    .score-circle-svg {
      color: #000;
    }
  }

  /* High Contrast Support */
  @media (prefers-contrast: high) {
    .score-dot.filled {
      @apply bg-black border border-white;
    }

    .score-dot.empty {
      @apply bg-white border border-black;
    }
  }

  /* Animation */
  .score-circle-progress {
    animation: drawCircle 1.5s ease-out;
    transform-origin: 50% 50%;
  }

  @keyframes drawCircle {
    0% {
      stroke-dasharray: 0, 100;
    }
    100% {
      stroke-dasharray: var(--final-stroke-dasharray, 0), 100;
    }
  }

  /* Responsive Design */
  @media (max-width: 640px) {
    .analysis-header {
      @apply flex-col items-center text-center;
    }

    .dimensions-grid {
      @apply grid-cols-1;
    }

    .recommendations-risks {
      @apply grid-cols-1;
    }
  }
</style>